MapWars: A Location-Aware
Multiplayer Strategy Game

Report Name
Author (User Id)
Supervisor
Degree Scheme
Module
Date
Revision
Status

Progress Report
Luke Ward (luw9)
Reyer Zwiggelaar (rzz)
Computer Science (G401)
CS39440
November 15, 2012
0.1
Draft

Contents
1

Project Summary
1.1 Overview . . . . . . . . . . . . . .
1.2 Similar Systems . . . . . . . . . .
1.2.1 Real-Time Strategy Games
1.2.2 Location-Aware Games .
1.3 Objectives . . . . . . . . . . . . .

.
.
.
.
.

1
1
1
1
2
2

2

Current Progress
2.1 Client . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.2 Server . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2
2
4

3

Plannning

5

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

.
.
.
.
.

Glossary

5

Acronyms

6

Annotated Bibliography

6

Progress Report - 0.1 (Draft)

1

Luke Ward (luw9)

Project Summary

1.1

Overview

MapWars will be a real-time strategy (RTS) games based around the users real location
and surroundings. It will be built to run on the Android mobile platform with a scalable
server to handle communication and control of the game. This will consist of a single
persistent game where every members units are on the same map as everyone else’s,
even those that are not currently online.
When logged in a user will be placed in their current location on a map. The local
area around the user will become their game area, as they move around in the real world
so the playable area will move with them. By gathering resources players will build up
defences for their base, as well as creating units and infantry. All players will be placed
in the same world, so everyone will be able to see everyone else’s units when they are
within range. This combination of location-awareness, strategy and online multiplayer
will combine to create an addictive and ever changing game.

1.2
1.2.1

Similar Systems
Real-Time Strategy Games

There are a number of RTS games for the desktop and console gaming market. One of
the earliest in this genre Cytron Masters, which was released in 1982, and had many of
the features of a modern day game. Two players would be placed on a grid which contained a number of generators, These generators would created resources allowing the
players to create different types of units to destroy the enemy. Since then games have
built on these fundamental ideas improving graphics, adding features and increasing
the number of options presented to the player. The more options available to the player
means the more choices they can make and increases the importance of a strong strategy
to outwit and overpower the opponent. Advancements in graphical performance of personal computers has seen games evolve from top-down grid based games to isometric
and on to fully 3D game-play.
Command & Conquer became the ﬁrst multiplayer RTS when it was released in 1995
for MS-DOS offering network based games with four players. It was later re-released
with added internet based multiplayer. As the spread of internet access and its bandwidth increased so did the popularity of these muliplayer online RTS games. Even with
widespread multiplayer games it is still rare to ﬁnd RTS games with more than a handful of player at anyone time. Also the majority of these still take place over a relatively
short period of time, with only a handful being persistent even when the user is not online. One game that combines a persistent universe and massively multiplayer online
(MMO) game play is EVE Online. EVE is a massively multiplayer online role playing
game (MMORPG) where players control spaceships in a single universe populated with
300,000 other players. The universe consists of over 7,500 solar systems different virtual solar systems. Although the game consists an amount of combat its main focus is
on resources and trading via a free and active economy. So even in the wide variety of
desktop based RTS games there is little in the way of a MMO game that is both persistent
and has a strong emphasis on strategy or tactical based game play.
A number of RTS titles also exist on the Android Market but they tend to be limited and not as featured rich as their desktop alternatives. A number of these can handle online multiplayer game play, but are limited to a small number of connections.
Location-aware multiplayer strategy game

1 of 6

Luke Ward (luw9)

Progress Report - 0.1 (Draft)

http://www.phonearena.com/news/Real-time-strategy-RTS-games-for-Android id32340.
There are a few location-aware or real world offerings available for Android devices,
these tend to consist of capturing locations by spending time or logging in there more
than anyone else.
1.2.2

Location-Aware Games

On the other side there are a number of location based games that take advantage of
technology but are played in a totally different way to MapWars. These often tend to
be chase or adventure games. Can You See Me Now? is far removed blah blah blah.
Also there are a number of Android games: http://geosocialgames.com/list-of-gsgs/
http://turfwarsapp.com/ http://geoempires.com/

1.3

Objectives

MapWars is going to attempt to take the the tactical aspects of these systems but remove
the fast paced ”rushing”. Rushing is a tactic in which a team will attack an opponent as
quickly as possible as to surprise and overwhelm them. Hoping that the opponent will
not have create adequate defences to counter the attack. One of MapWars main focuses
in regard to strategy and game play is to have on continuous game, with many opponents. This will encourage players to concentrate on gathering resources and fortifying
their base before they can have the ﬁre-power to take on an enemies forces.

2

Current Progress

2.1

Client

Installing and conﬁguring the Android software development kit (SDK) to work with
Eclipse was as straight forward as it could possibly be, with lots of online guides and
resources from Google. After getting the SDK setup I started to look at building a basic
application to get used to the structure and work ﬂow. Due to my background knowledge of Java and after looking at a couple of tutorials I had a basic ”Hello World” style
application running. I spent some time getting to grips with creating layouts and controlling the different types of elements and how they can be styled.
One of the ﬁrst things that I looked into implementing was a mapping solution in a
basic Android application. These maps will also needed to be able to handle overlays
that could be placed on top of a working interactive map. Each overlay would need
to contain multiple items or different types that could both appear differently and be
moved individually. Due to Android being developed by Google who also own one of
the most widely used online mapping systems it seemed like an obvious choice to ﬁrst
investigate Google Maps. I did some simple spike work into the included maps package
that comes with the Android SDK. Very quickly I had an application with a working
map and a simple overlay. I did not investigate to deep into creating more complex
overlays at this point. After verifying that this system met the requirements I had set
out I wanted to take a closer look at the terms of use and licensing agreement. The
Google Maps API licensing page [1] states that ”Your service must be freely and publicly
accessible to end users.” This could be a problem for any future development that would
result in a paid for application. Therefore I intend to stay away from licensed solutions
as much as possible.
2 of 6

Location-aware multiplayer strategy game

Progress Report - 0.1 (Draft)

Luke Ward (luw9)

So I started to look at alternatives that would be as easy to implement but not have
the same limitations on usage. OpenStreetMap is a crowdsourced project to create a
free map of the world to rival closed paid for alternatives. Data is ﬁrst collected via
a GPS receiver and uploaded to the site, this is then edited to add more information
about the uploaded data. Maps are freely editable by any member of the site so they
can update, alter and correct their local area allowing it to quickly respond to changes
that may take some time to be reproduced by other organizations. It also has received
a lot of data through donations from governments and companies interested in helping
the open-source mapping community. OpenStreetMap seemed like a good choice due
to its open nature and constant reﬁning, but there are no ofﬁcial Android packages and
only a handful of third party offerings. For example osmdroid1 which is a near complete
replacement of the MapView class I had previously been using in the Google offering.
This seemed like a good candidate but I continued to look at OpenStreetMap to see if
there was anything else that had more support. AOL’s MapQuest in July 2010 introduced
OpenStreetMap’s data into an open-source offering of their service. MapQuest offerings
a complete MapView alternative in the form of its Android Maps Api [2]. This API can
serve either licensed data or OpenStreetMap data. When using licensed data you can not
include it with a non-publicly available application that is not available without charge,
just like with the Google Maps API), but you can if you are using OpenStreetMap data.
A nice feature with OpenStreetMap is the ability to customize map tiles using Mapnik. Mapnik allows you to take the underlying data and style it how you wish, creating
anything from simple line drawings to shaded relief maps. This will be infeasible with
the number of users this application could expect to support as hosting a tile server is
expensive and resource intensive. An alternative to this is to use the data to produce simple paths that can be stored on the server and sent to the client. These would highlight
areas such as resources that can then be drawn on a map overlay.

Figure 1: Class diagram of currently achieved work
Figure 1 shows the current work that I have undertaken for the Android client. It
1

Available here http://code.google.com/p/osmdroid/

Location-aware multiplayer strategy game

3 of 6

Luke Ward (luw9)

Progress Report - 0.1 (Draft)

gathers the users location and creates a unit of this location. This unit is then added to
the UnitOverlREpresentational State Transferay which is added to the map. The LocationTracker tracks the users location via data received from both the network and GPS.
Each time a new location is received it is compared with the last known position. Depending on if it is deemed to be more accurate than the previous location the user unit
location might be updated. If the unit is moved the overlay is invalidated to force a call
to the draw method. The draw method iterates through its list of units, getting their location and path which is used to draw the unit. Each unit has a different path, depending
on its type, which depicts what should be draw on the canvas. Currently these paths
are simple 3 or 4 sided shapes but they could easily be swapped out for more complex
shapes or even SVG ﬁles.

2.2

Server

The server portion of the system, I have just started looking into the different technologies and options available to me. I have yet to decide on a language or communication
method.
I started of by looking at the advantages and disadvantages of PUSH and PULL
communications. Due to the nature of the application I am trying to create the default
choice would be to use PUSH technology. This would mean that the updates from the
server propagate to all the relevant clients as soon as they are created. As well as this
Android does support PUSH but only via its own Google Cloud Messaging for Android
(GCM), which I need to do further research into. There are a number of ways to achieve
similar effects such as long polling but GCM handles a lot of the transmission for you. It
is also imposes no quotas and can allow an application to receive messages even when
it is not active.
PULL has the advantage of being easy to implement due to being sent via a standard
request. Although the apparent disadvantages of high update latency and increased
battery and data usage. I have found an interesting paper about using RESTful architecture for multi-user virtual environments [3]. In this study they examined if a REpresentational State Transfer (REST) architecture could be used to handle the number of
interactions a MMO is expected to. Current desktop MMO games tend to use tightly
coupled interactions between client and server that resulted in limited scalability. They
conclude that it is feasible to support the kind of user and interaction loads found in
popular MMOs using REST if caching and other techniques were utilized. REST lends
itself to scalable applications due to its stateless communication, meaning that it will
need to re-authenticate for each request. This re-authentication means that the request
can be passed and handled by any server in the network, irrespective of any previous interactions with the client. Creating a scalable server architecture is one of my main goals
for the server, using PULL would make this easier. Each request would be received
by a transparent proxy that will forward the message on to one of the servers residing
behind it. The server will then process this request, responding data will then relayed
back through the proxy to the client. Having each request hit the proxy before being
allocated to a server will help load balance the servers, distributing activity equally between servers. Allowing the proxy to avoid overloaded machines until they ﬁnish their
current requests. When using PUSH this balancing becomes more complicated as the
proxy will direct each new client to the least loaded server. As users connect and part
one server may become overloaded as its connected clients continue to interact heavily
while other servers sit idling. This can be combated by closing connections and having
4 of 6

Location-aware multiplayer strategy game

Progress Report - 0.1 (Draft)

Luke Ward (luw9)

them re-established with a different server when one comes under heavy load. Again
I am not entirely sure how this will relate to GCM as this handles its own connections
with the client and any server can push messages onto GCM.
I still need to do spike work into implementing both methods before I can come to
solid conclusion. I intend to create a basic client and server for both methods, with the
client sending variable amounts of test data. This spike work will need to look into the
following:
• Complexity of implementation
• Battery usage
• Data usage
• Latency
• Server load per client
• Scaling options
I am interested in looking at using PUSH over PULL despite of the possible draw back
of power usage and possible latency. The latency issue can be reduced by implementing
parts of the server logic into the client. Thus the client can predict what actions have
taken place in regards to unit placement, resource gathering etc between updates from
the server. The server updates will then replace the predicted data hopefully with limited effect. Avoiding the GCM would allow greater control over data transmission and
proxy/distribution considerations. As well as this it would be nice to expand on the
work described in the RESTful feasibility study [3]. Taking the conclusions that they
reached and applying them to a real world application to see if it really does scale as
well as they predicted. Testing it with multiple proxies and servers and seeing if the
same results are seen or if there is a consideration that they missed. On top of this the
paper was aimed at the desktop broadband MMO with fast paced interactions, where
as MapWars intends to be used slightly differently. With less interactions over a much
longer period of time via a greatly reduced connection.

3

Plannning

Glossary
long polling ———- STUFF ———-. 4, 5
PULL is a communication method in which a client requests information from the server
every time it needs updates. This means that clients can make numerous requests
and get no updates as there is nothing to update. Even when there are available
updates it can take time for the client to be updated depending on the interval
between requests. 4, 5
PUSH is a communication method when a connection is kept open between the client
and server, with the server pushing information to the client when updates are
available. This means that the server will only send data when there is something
to update and with little latency. 4, 5
Location-aware multiplayer strategy game

5 of 6

Luke Ward (luw9)

Progress Report - 0.1 (Draft)

REpresentational State Transfer (REST) is a stateless transfer protocol that has been
predominantly used for web applications. 5

Acronyms
GCM Google Cloud Messaging for Android. 4, 5
MMO massively multiplayer online. 1, 4, 5
MMORPG massively multiplayer online role playing game. 1, 5
REST REpresentational State Transfer. 4, 5
RTS real-time strategy. 1, 5
SDK software development kit. 2, 5

Annotated Bibliography
[1] “Google Maps API licensing.” https://developers.google.com/maps/
licensing, november 2012. Accessed November 2012.
[2] “MapQuest developers.” http://developer.mapquest.com/. Accessed October 2012.
[3] C. Lopes, T. Debeauvais, and A. Valadares, “Restful massively multi-user virtual
environments: A feasibility study,” in Games Innovation Conference (IGIC), 2012 IEEE
International, pp. 1 –4, sept 2012.
[4] R. Shrestha and Y. Aihong, “Design of secure location and message sharing system
for android platform,” in Computer Science and Automation Engineering (CSAE), 2012
IEEE International Conference on, pp. 117 –121, may 2012.

6 of 6

Location-aware multiplayer strategy game

